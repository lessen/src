# -*- sh -*-

#<
# # Dot

# Dot: ultra-portable config files  (for Unix tools on Mac and Linux)
# Copyright (c) 2016, Tim Menzies tim@menzies.us, [MIT license v2](http://bit.ly/lessenlicense).

# ## Synopsis

#     sh dot

# ## Description

# When working on multiple machines, it is tedious to reconfigure each new
# machine. Also, its bad manners to reconfigure someone else's machine unless
# you undo it all when you leave.

# Enter `dot`. This is a bash init file that sets up an new shell and writes
# your preferred config files to `/tmp/$USER`.  
# This current version of `dot` handles configs for 
# 
# - bash : numerous command-line tricks;
# - github: quicker work flow 
#      - `old` pulls from master; `new` commits and pushes to master
#      - A tmp password server is enabled (so you only need to type
#       your password every hour);
# - emacs :
#      - all emacs packages auto-downloaded and installed
#      - cool packages are installed (ido, neotree, recent files, powerline)
#      - mouse enabled, syntax highlighting enabled, etc
#      - cool themes enabled
# - vim :
#      - Vim package manager installed
#      - Line numbers enabled as is file path and title in header.
#      - Incremebtal search enabled.
#      - And other stuff besides
#      - Note: don't have a good way to share the local spelling dictionary. Suggestions anyone?
# - python 
#      - calls python3
#      - adding sub-directories to PYTHONPATH and
#      - disabling genration of those .pyc files.

# Inside the dot shell, certain
# standard commands are rewritten such that, when they are called, they use
# config files written into `/tmp/$USER`.  Also, at start up, `dot` will perform
# certain standard startup actions (initializes and/or downloads emacs packages).

#
# The point of all this is that
#
# 1. All the code for `dot` is in one file, so easy to download.
# 2. When the `dot` shell exists, all that configs
#    disappears. So no residual configurations.

# ## Installation

# ```sh
# wget -O dot    http://tiny.cc/ttv1dot    # Code
# sh dot  
# dot0    # needed to install vim, emacs plugins.  only needs to be runs one
# ```
#  
# Note that the above `dot0` commands sometimes prints an ignorable error message
# `window too small for splitting`.
#
#>

Dot=/tmp/$USER/dot/$$
mkdir -p $Dot

trap zap EXIT

zap() { rm -rf $Dot; }

#########################################################
cat <<'EOF' > $Dot/dotbashrc
# -*- sh -*- 
#### begin config

What="TTV1"
When="2016"
Who="Tim Menzies, George Mathew"
How="MIT (v2) licence"

Emacs="/Applications/Emacs.app/Contents/MacOS/Emacs"

GitUserName="Tim Menzies"
GitUserEmail="tim@menzies.us"
GitCoreEditor="`which nano`"

####

What=${What:-"DOT"}
When=${When:-1984}
Who=${Who:-"Alan Turing"}
How=${How:-"MIT (v2) license"}
Emacs=${Emacs:-"/Applications/Emacs.app/Contents/MacOS/Emacs"}

###

echo 
echo "$What v1.0 (c) $When ${Who}, $How"

Edot="$Dot/dotemacs"

dot0() { # start-up actions
  vim +PluginInstall +qall      # install vim plugins
  emacs -script $Dot/install.el # install emacs plugins
}

alias python="`which python3`  -B "
#alias vi="`which mvim` -u $Dot/dotvimrc "

emacs() { "$Emacs" -q -l "$Edot" $* &  
}

em() { emacs -q -l "$Edot" $*   
     }

oks() {
    for i in *ok.py; do
        python $i
    done
}

ok() {
    f=${1}ok.py
    echo ";;;;;;;;;; ;;;;;;;;;; ;;;;;;;;;; $f" 
    time python -B $f
}

reload() { . "$Dot"/dotbashrc ; }

sh2md() { x2md $1 "#[<>]"; }
py2md() { x2md $1 "^\"\"\""; }

x2md() {
    stem="${1%.*}"
    pat=${2:-"#[<>]"}
    header="$Dot/etc/head.md"
    if [ "$1" -nt "${stem}.md" ]
    then
      echo "# $1 to ${stem}.md ... "
      ( if [ -f "$header" ]; then
          cat $header
       fi
       echo "_(This file is auto-generated from [$1]($1).)_  "
       cat $1 |  
        awk  ' $0 ~ pat { In = 1 - In }
               In       { sub(/^#[<> ]?/,"");
                         print $0
                       }
             ' pat=$pat  )> ${stem}.md
       git add ${stem}.md
    fi
}

Seed=0

here() { cd $1; basename "$PWD"; }

PROMPT_COMMAND='echo  -ne "${What}:\033]0; $(here ..)/$(here .)\007"
PS1=" $(here ..)/$(here .) \!> "'

alias ls='ls -G'                 ## short format
alias ll='ls -la'                ## long format
alias l.='ls -d .* --color=auto' ## Show hidden files
alias cd..='cd ..' ## get rid of a common 'command not found' error
alias ..='cd ..' # quick change dir command
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

new() {
    ready
    git status
    git commit -am "saving"
    git push origin master
}
old() {
    ready
    git pull origin master
}
ready() {
    gitting
}
gitting() {
    if [ -n "$GitUserName" ]; then
        git config --global user.name "$GitUserName"
    fi
    if [ -n "$GitUserEmail" ]; then
      git config --global user.email $GitUserEmail
    fi
    if [ -n "GitCoreEditor" ]; then
      git config --global core.editor $GitCoreEditor
    fi  
    git config --global credential.helper cache
    git config credential.helper 'cache --timeout=3600'
}
update() {
  echo "Are sure you want to zap dot?"
  echo "Return to continue, Control-c to cancel... "
  read x
  echo "Updating dot ... "
  wget -O - http://bit.ly/timdot
  echo ""
  echo "You should run 'reload' now."
}
EOF

#########################################################
cat<<'EOF' > $Dot/install.el
; -*- lisp -*-
  (require 'package)
  (setq package-archives 
     '(("gnu" . "http://elpa.gnu.org/packages/")
       ("marmalade" . "https://marmalade-repo.org/packages/")
       ("melpa" . "http://melpa.org/packages/")))

  (package-initialize)
  (if (boundp 'my-wants)
      (mapcar (lambda (package)
          (unless (package-installed-p package)
            (package-install package)))
         '( zenburn-theme
            diff-hl
           ;async
            helm
            neotree
            deft
            powerline
            markdown-mode
            color-theme)))
EOF

#########################################################
cat<<'EOF' > $Dot/dotemacs
; -*- lisp -*-
  (setq tags-file-name "TAGS")
  (tool-bar-mode -1)
  (setq ispell-program-name 
        (if 
            (boundp 'my-spell) 
            my-spell 
          "/usr/local/bin/ispell"))
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "https://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))
  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list
     'package-archives
     '("melpa" . "http://melpa.org/packages/")
     t)
    (package-initialize))

  ;(require 'helm-config)
  (require 'ido)
  (require 'neotree)
  (require 'recentf)
  (require 'imenu)
  (require 'powerline)

  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (powerline-default-theme)
  (global-set-key (kbd "C-.") 'imenu-anywhere)
  (ido-mode t)
  (global-set-key [f9] 'neotree-toggle)
  (neotree-toggle)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  (progn
    (setq require-final-newline    t) 
    (setq next-line-add-newlines nil) 
    (setq inhibit-startup-message  t)
    (setq-default fill-column     80)
    (setq column-number-mode       t)
    (setq make-backup-files      nil) 
    (transient-mark-mode           t)
    (global-font-lock-mode         t)
    (global-hl-line-mode           0)  
    (xterm-mouse-mode              t)
    (setq scroll-step              1)
    (show-paren-mode               t))

  (setq display-time-day-and-date t) (display-time) 
  (setq-default indent-tabs-mode nil) 

  (setq frame-title-format
        '(:eval
          (if buffer-file-name
              (replace-regexp-in-string
               "\\\\" "/"
               (replace-regexp-in-string
                (regexp-quote (getenv "HOME")) "~"
                (convert-standard-filename buffer-file-name)))
            (buffer-name))))

  (add-hook 'python-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil
                    tab-width 2)
              (setq python-indent 2)))

  (add-hook 'python-mode-hook
            (lambda()
              (local-set-key (kbd "C-c <right>") 'hs-show-block)
              (local-set-key (kbd "C-c <left>")  'hs-hide-block)
              (local-set-key (kbd "C-c <up>")    'hs-hide-all)
              (local-set-key (kbd "C-c <down>")  'hs-show-all)
              (hs-minor-mode t)))

  (eval-after-load "color-theme"
    '(progn
       (color-theme-initialize)
       (color-theme-charcoal-black)))

  (require 'color-theme)
EOF

#########################################################
cat<<'EOF' > $Dot/dotvimrc
set backupdir-=.
EOF

echo "set backupdir^=$Dot">> $Dot/dotvimrc

cat<<'EOF' >> $Dot/dotvimrc
"ascii mouse
set mouse=a
"place buffer name into window title
set title
"show line numbers
set number
"cycling through buffers
map <C-n> :exe  ":buf ".((bufnr("%") % bufnr("$"))+1)<CR>
" auto-change directory to that of the current buffer
autocmd BufEnter * cd %:p:h
" Shows the matching bracket when entering expressions
" (you'll never miss one again!)
set showmatch
set matchtime=15
"pretty colors
set background=light
set syntax=on
syntax enable
"" Incremental search
" (as you type in the search query, it will show you
" whether your query currently matches anything)
set ignorecase
set incsearch
set smartcase
" source code indenting
set smarttab
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab ts=2 sw=2 ai

" Help for viminfo is at:  :he 'viminfo'
"   '10  : marks will be remembered for up to 10 previously edited files
"   "100 : will save up to 100 lines for each register
"   :20  : up to 20 lines of command-line history will be remembered
"   %    : saves and restores the buffer list
"   n... : where to save the viminfo files
"set viminfo='10,\"100,:20,%,n~/.viminfo
"autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <=
"line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
"set t_ti= t_te=
colors elflord

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdtree'
"Plugin 'altercation/vim-colors-solarized'"
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-markdown'
Plugin 'flazz/vim-colorschemes'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
 
"
"

autocmd VimEnter * NERDTree
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
colorscheme 1989
"vim -u vimrc"
EOF

#########################################################

PATH1="$(find $PWD -type f -name '*py' | grep -o '\(.*\)/' | sort -u | tr '\n' ':')"

find . -type f  -name '*.py' | 
awk -F\/ '{ if (++seen[$NF] >  1) print "Warning, repeated file: " $0 }'

# call a shell with functions that call things with the above config 
Dot=$Dot                       \
PYTHONPATH="$PATH1:$PYTHONPATH" \
MYVIMRC=$Dot/dotvimrc            \
bash --init-file $Dot/dotbashrc  -i
