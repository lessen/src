# -*- sh -*-

#<
# # Dot

# Dot: ultra-portable config files  (for Unix tools on Mac and Linux)
# Copyright (c) 2016, Tim Menzies tim@menzies.us, [MIT license v2](http://bit.ly/lessenlicense).

# ## Synopsis

#     sh dot

# ## Description

# When working on multiple machines, it is tedious to reconfigure each new
# machine. Also, its bad manners to reconfigure someone else's machine unless
# you undo it all when you leave.

# Enter `dot`. This is a bash init file that sets up an new shell and writes
# your preferred config files to `/tmp/$USER`.  
# This current version of `dot` handles configs for 
# 
# - bash : numerous command-line tricks;
# - github: quicker work flow 
#      - `old` pulls from master; `new` commits and pushes to master
#      - A tmp password server is enabled (so you only need to type
#       your password every hour);
# - emacs :
#      - all emacs packages auto-downloaded and installed
#      - cool packages are installed (ido, neotree, recent files, powerline)
#      - mouse enabled, syntax highlighting enabled, etc
#      - cool themes enabled
# - vim :
#      - Vim package manager installed
#      - Line numbers enabled as is file path and title in header.
#      - Incremebtal search enabled.
#      - And other stuff besides
#      - Note: don't have a good way to share the local spelling dictionary. Suggestions anyone?
# - python 
#      - calls python3
#      - disabling genration of those .pyc files.

# Inside the dot shell, certain
# standard commands are rewritten such that, when they are called, they use
# config files written into `/tmp/$USER`.  Also, at start up, `dot` will perform
# certain standard startup actions (initializes and/or downloads emacs packages).

#
# The point of all this is that
#
# 1. All the code for `dot` is in one file, so easy to download.
# 2. When the `dot` shell exists, all that configs
#    disappears. So no residual configurations.

# ## Installation

# ```sh
# wget -O dot    http://tiny.cc/ttv1dot    # Code
# sh dot  
# dot0    # needed to install vim, emacs plugins.  only needs to be runs one
# ```
#  
# Note that the above `dot0` commands sometimes prints an ignorable error message
# `window too small for splitting`.
#
#>

Dot=/tmp/$USER/dot/$$
mkdir -p $Dot

trap zap EXIT

zap() { rm -rf $Dot; }

#########################################################
cat<<'EOF' >$Dot/header
""" 
<img 
src="https://avatars0.githubusercontent.com/u/23156192?v=3&s=200"
align=left
width=120>
&nbsp;<br>&nbsp;<br>
_Just another [Timm Tool](http://ttv1.github.com).<br> Discuss this file [on Github](https://github.com/ttv1/src/issues). <img  align=middle src="https://github.com/favicon.ico">_
<br clear=all>

_________________


EOF
cat <<'EOF' > $Dot/footer 

"""
____


<img align=right 
src="https://raw.githubusercontent.com/timm/timm.github.io/master/timm.png"
width=170>
## Copyleft

Copyright &copy; 2016 Tim Menzies <tim@menzies.us>

This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The F*ck You Want
To Public License, Version 2, as published by Sam Hocevar. See
[http://www.wtfpl.net](http://www.wtfpl.net) for more details.

Share and enjoy.

"""

EOF
cat <<'EOF' > $Dot/footer.html

<hr>
<h2> Copyleft </h2>

<img align=right 
src="https://raw.githubusercontent.com/timm/timm.github.io/master/timm.png"
width=170>
<p>Copyright &copy; 2016 Tim Menzies <tim@menzies.us></p>

<p>This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The F*ck You Want
To Public License, Version 2, as published by Sam Hocevar. See
<a href="http://www.wtfpl.net">http://www.wtfpl.net</a>) for more details.</p>

<p>Share and enjoy.</p>

EOF

cat <<'EOF' > $Dot/dotbashrc
# -*- sh -*- 
#### begin config

What="TTV1"
When="2016"
Who="Tim Menzies, George Mathew"
How="MIT (v2) licence"

Emacs="/Applications/Emacs.app/Contents/MacOS/Emacs"

GitUserName="Tim Menzies"
GitUserEmail="tim@menzies.us"
GitCoreEditor="`which nano`"

####

What=${What:-"DOT"}
When=${When:-1984}
Who=${Who:-"Alan Turing"}
How=${How:-"MIT (v2) license"}
Emacs=${Emacs:-"/Applications/Emacs.app/Contents/MacOS/Emacs"}

###



for x in nano awk bash python3 pypy3 mvim $Emacs vim ; do
    if [ -z "`which $x`" ]; then
        echo "$What needs install $x"
    fi
done

echo 
echo "$What v1.0 (c) $When ${Who}, $How"

Edot="$Dot/dotemacs"

dot0() { # start-up actions
  vim +PluginInstall +qall      # install vim plugins
  emacs -script $Dot/install.el # install emacs plugins
}

pyccos() {
  for p in *.py; do
    if [ "$p" -nt "docs/$p" ]; then
       pycco $p
    fi
  done
  (echo "<h1>Timm Tools</h1><ul>"
  echo "<img src=\"https://raw.githubusercontent.com/timm/timm.github.io/master/timm.png\" align=right  width=170>"
  for p in *.py; do
     h=${p%.*}.html 
     echo "<li><a href="$h">$p</a></li>"
   done
   echo "</ul>"
   cat $Dot/footer.html
   ) > docs/index.html
}

pycco() {
  if [ -f "$1" ]; then
    d=$DotDir/docs
    mkdir -p $d
    x=`which pycco`
    cat $1 | gawk '
      NR==1 { system("cat '$Dot/header'"); next}
            { print $0}
      END   { system("cat '$Dot/footer'"); } ' > $d/$1
    $x -d $d $d/$1
    html="docs/${1%.*}.html"
    echo $html
    cat $html |
    gawk '/<div id=.container.>/ { print $0
                                  print "<a href=\"https://github.com/ttv1/src/blob/master/ABABABAB\"><img style=\"z-index: 10; position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"></a> "; next
                                }
           /<h1>/               { sub(/<h1>/,"<h1>\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;"); print $0; next }
                                { print $0 }
    ' |
    sed 's/ABABABAB/'$1'/' > $Dot/$1
    cp $Dot/$1 $html
   
    #cp $Dot/pycco.css $d
  else
    echo "$1 not found"
  fi
}

alias python="`which python3`  -B "
alias pypy="`which pypy3`  -B "
alias vi="`which mvim` -u $Dot/dotvimrc "

emacs() { "$Emacs" -q -l "$Edot" $* &  
}

em() { emacs -q -l "$Edot" $*   
     }

eg() {
 if [ -f "${1}eg.py" ]; then pypy3 ${1}eg.py; fi
 if [ -f "${1}.py" ]; then
    if [  "${1}.py" -nt "docs/${1}.html" ]; then 
       pycco $1.py    
    fi
 fi
}

ok() {
    f=${1}ok.py
    echo ";;;;;;;;;; ;;;;;;;;;; ;;;;;;;;;; $f" 
    time python -B $f
}

reload() { . "$Dot"/dotbashrc ; }

eight() {
  echo ""
  cat - | sed 's/^/        /'
  echo ""
}
sh2md() { x2md $1 '#[<>]'   '^#[<> ]?';}
py2md() { x2md $1 '^\"\"\"' '^"""'; }

x2md() {
    stem="${1%.*}"
    pat1=${2:-'#[<>]'}
    pat2=${3:-'^#[<> ]?'}
    echo "pat1 [$pat1] pat2 [$pat2]"
    header="$DotDir/etc/head.md"
    if [ "$1" -nt "${stem}.md" ]
    then
      echo "# $1 to ${stem}.md ... "
      ( if [ -f "$header" ]; then
          cat $header
       fi
       echo "_(This file is auto-generated from [$1]($1).)_  "
       echo 
       cat $1 |  
        awk  ' $0 ~ pat1 { In = 1 - In }
               In       { sub(pat2,"");
                          print $0
                       }
             ' pat1="$pat1" pat2="$pat2"  )> ${stem}.md
       git add ${stem}.md
    fi
}

Seed=0

here() { cd $1; basename "$PWD"; }

PROMPT_COMMAND='echo  -ne "${What}:\033]0; $(here ..)/$(here .)\007"
PS1=" $(here ..)/$(here .) \!> "'

alias ls='ls -G'                 ## short format
alias ll='ls -la'                ## long format
alias l.='ls -d .* --color=auto' ## Show hidden files
alias cd..='cd ..' ## get rid of a common 'command not found' error
alias ..='cd ..' # quick change dir command
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

new() {
    ready
    git status
    git commit -am "saving"
    git push origin master
}
old() {
    ready
    git pull origin master
}
ready() {
    gitting
}
gitting() {
    if [ -n "$GitUserName" ]; then
        git config --global user.name "$GitUserName"
    fi
    if [ -n "$GitUserEmail" ]; then
      git config --global user.email $GitUserEmail
    fi
    if [ -n "GitCoreEditor" ]; then
      git config --global core.editor $GitCoreEditor
    fi  
    git config --global credential.helper cache
    git config credential.helper 'cache --timeout=3600'
}
update() {
  echo "Are sure you want to zap dot?"
  echo "Return to continue, Control-c to cancel... "
  read x
  echo "Updating dot ... "
  wget -O - http://bit.ly/timdot
  echo ""
  echo "You should run 'reload' now."
}
EOF
cat<<'EOF' > $Dot/pycco.css
/*--------------------- Layout and Typography ----------------------------*/
body {
  font-family: 'Palatino Linotype', 'Book Antiqua', Palatino, FreeSerif, serif;
  font-size: 16px;
  line-height: 24px;
  color: #252519;
  margin: 0; padding: 0;
  background: #f5f5ff;
}
a {
  color: #261a3b;
}
  a:visited {
    color: #261a3b;
  }
p {
  margin: 0 0 15px 0;
}
h1, h2, h3, h4, h5, h6 {
  margin: 40px 0 15px 0;
}
h2, h3, h4, h5, h6 {
    margin-top: 0;
  }
#container {
  background: white;
 }
#container, div.section {
  position: relative;
}
#background {
  position: absolute;
  top: 0; left: 520px; right: 0; bottom: 0;
  background: #f5f5ff;
  border-left: 1px solid #e5e5ee;
  z-index: 0;
}
#jump_to, #jump_page {
  background: white;
  -webkit-box-shadow: 0 0 25px #777; -moz-box-shadow: 0 0 25px #777;
  -webkit-border-bottom-left-radius: 5px; -moz-border-radius-bottomleft: 5px;
  font: 10px Arial;
  text-transform: uppercase;
  cursor: pointer;
  text-align: right;
}
#jump_to, #jump_wrapper {
  position: fixed;
  right: 0; top: 0;
  padding: 5px 10px;
}
  #jump_wrapper {
    padding: 0;
    display: none;
  }
    #jump_to:hover #jump_wrapper {
      display: block;
    }
    #jump_page {
      padding: 5px 0 3px;
      margin: 0 0 25px 25px;
    }
      #jump_page .source {
        display: block;
        padding: 5px 10px;
        text-decoration: none;
        border-top: 1px solid #eee;
      }
        #jump_page .source:hover {
          background: #f5f5ff;
        }
        #jump_page .source:first-child {
        }
div.docs {
  float: left;
  max-width: 500px;
  min-width: 500px;
  min-height: 5px;
  padding: 10px 10px 1px 10px;
  vertical-align: top;
  text-align: left;
}
  .docs pre {
    margin: 15px 0 15px;
    padding-left: 15px;
  }
  .docs p tt, .docs p code {
    background: #f8f8ff;
    border: 1px solid #dedede;
    font-size: 12px;
    padding: 0 0.2em;
  }
  .octowrap {
    position: relative;
  }
    .octothorpe {
      font: 12px Arial;
      text-decoration: none;
      color: #454545;
      position: absolute;
      top: 3px; left: -20px;
      padding: 1px 2px;
      opacity: 0;
      -webkit-transition: opacity 0.2s linear;
    }
      div.docs:hover .octothorpe {
        opacity: 1;
      }
div.code {
  margin-left: 520px;
  padding: 14px 15px 16px 15px;
  vertical-align: top;
}
  .code pre, .docs p code {
    font-size: 12px;
  }
    pre, tt, code {
      line-height: 18px;
      font-family: Monaco, Consolas, "Lucida Console", monospace;
      margin: 0; padding: 0;
    }
div.clearall {
    clear: both;
}


/*---------------------- Syntax Highlighting -----------------------------*/
td.linenos { background-color: #f0f0f0; padding-right: 10px; }
span.lineno { background-color: #f0f0f0; padding: 0 5px 0 5px; }
body .hll { background-color: #ffffcc }
body .c { color: #408080; font-style: italic }  /* Comment */
body .err { border: 1px solid #FF0000 }         /* Error */
body .k { color: #954121 }                      /* Keyword */
body .o { color: #666666 }                      /* Operator */
body .cm { color: #408080; font-style: italic } /* Comment.Multiline */
body .cp { color: #BC7A00 }                     /* Comment.Preproc */
body .c1 { color: #408080; font-style: italic } /* Comment.Single */
body .cs { color: #408080; font-style: italic } /* Comment.Special */
body .gd { color: #A00000 }                     /* Generic.Deleted */
body .ge { font-style: italic }                 /* Generic.Emph */
body .gr { color: #FF0000 }                     /* Generic.Error */
body .gh { color: #000080; font-weight: bold }  /* Generic.Heading */
body .gi { color: #00A000 }                     /* Generic.Inserted */
body .go { color: #808080 }                     /* Generic.Output */
body .gp { color: #000080; font-weight: bold }  /* Generic.Prompt */
body .gs { font-weight: bold }                  /* Generic.Strong */
body .gu { color: #800080; font-weight: bold }  /* Generic.Subheading */
body .gt { color: #0040D0 }                     /* Generic.Traceback */
body .kc { color: #954121 }                     /* Keyword.Constant */
body .kd { color: #954121; font-weight: bold }  /* Keyword.Declaration */
body .kn { color: #954121; font-weight: bold }  /* Keyword.Namespace */
body .kp { color: #954121 }                     /* Keyword.Pseudo */
body .kr { color: #954121; font-weight: bold }  /* Keyword.Reserved */
body .kt { color: #B00040 }                     /* Keyword.Type */
body .m { color: #666666 }                      /* Literal.Number */
body .s { color: #219161 }                      /* Literal.String */
body .na { color: #7D9029 }                     /* Name.Attribute */
body .nb { color: #954121 }                     /* Name.Builtin */
body .nc { color: #0000FF; font-weight: bold }  /* Name.Class */
body .no { color: #880000 }                     /* Name.Constant */
body .nd { color: #AA22FF }                     /* Name.Decorator */
body .ni { color: #999999; font-weight: bold }  /* Name.Entity */
body .ne { color: #D2413A; font-weight: bold }  /* Name.Exception */
body .nf { color: #0000FF }                     /* Name.Function */
body .nl { color: #A0A000 }                     /* Name.Label */
body .nn { color: #0000FF; font-weight: bold }  /* Name.Namespace */
body .nt { color: #954121; font-weight: bold }  /* Name.Tag */
body .nv { color: #19469D }                     /* Name.Variable */
body .ow { color: #AA22FF; font-weight: bold }  /* Operator.Word */
body .w { color: #bbbbbb }                      /* Text.Whitespace */
body .mf { color: #666666 }                     /* Literal.Number.Float */
body .mh { color: #666666 }                     /* Literal.Number.Hex */
body .mi { color: #666666 }                     /* Literal.Number.Integer */
body .mo { color: #666666 }                     /* Literal.Number.Oct */
body .sb { color: #219161 }                     /* Literal.String.Backtick */
body .sc { color: #219161 }                     /* Literal.String.Char */
body .sd { color: #219161; font-style: italic } /* Literal.String.Doc */
body .s2 { color: #219161 }                     /* Literal.String.Double */
body .se { color: #BB6622; font-weight: bold }  /* Literal.String.Escape */
body .sh { color: #219161 }                     /* Literal.String.Heredoc */
body .si { color: #BB6688; font-weight: bold }  /* Literal.String.Interpol */
body .sx { color: #954121 }                     /* Literal.String.Other */
body .sr { color: #BB6688 }                     /* Literal.String.Regex */
body .s1 { color: #219161 }                     /* Literal.String.Single */
body .ss { color: #19469D }                     /* Literal.String.Symbol */
body .bp { color: #954121 }                     /* Name.Builtin.Pseudo */
body .vc { color: #19469D }                     /* Name.Variable.Class */
body .vg { color: #19469D }                     /* Name.Variable.Global */
body .vi { color: #19469D }                     /* Name.Variable.Instance */
body .il { color: #666666 }                     /* Literal.Number.Integer.Long */

.docs pre { 
   font-size  : 10px; 
}

EOF

#########################################################
cat<<'EOF' > $Dot/install.el
; -*- lisp -*-
  (require 'package)
  (setq package-archives 
     '(("gnu" . "http://elpa.gnu.org/packages/")
       ("marmalade" . "https://marmalade-repo.org/packages/")
       ("melpa" . "http://melpa.org/packages/")))

  (package-initialize)
  (if (boundp 'my-wants)
      (mapcar (lambda (package)
          (unless (package-installed-p package)
            (package-install package)))
         '( zenburn-theme
            diff-hl
           ;async
            helm
            neotree
            deft
            powerline
            markdown-mode
            color-theme)))
EOF

#########################################################
cat<<'EOF' > $Dot/dotemacs
; -*- lisp -*-
  (setq tags-file-name "TAGS")
  (tool-bar-mode -1)
  (setq ispell-program-name 
        (if 
            (boundp 'my-spell) 
            my-spell 
          "/usr/local/bin/ispell"))
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "https://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))
  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list
     'package-archives
     '("melpa" . "http://melpa.org/packages/")
     t)
    (package-initialize))

  ;(require 'helm-config)
  (require 'ido)
  (require 'neotree)
  (require 'recentf)
  (require 'imenu)
  (require 'powerline)

  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (powerline-default-theme)
  (global-set-key (kbd "C-.") 'imenu-anywhere)
  (ido-mode t)
  (global-set-key [f9] 'neotree-toggle)
  (neotree-toggle)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  (progn
    (setq require-final-newline    t) 
    (setq next-line-add-newlines nil) 
    (setq inhibit-startup-message  t)
    (setq-default fill-column     80)
    (setq column-number-mode       t)
    (setq make-backup-files      nil) 
    (transient-mark-mode           t)
    (global-font-lock-mode         t)
    (global-hl-line-mode           0)  
    (xterm-mouse-mode              t)
    (setq scroll-step              1)
    (show-paren-mode               t))

  (setq display-time-day-and-date t) (display-time) 
  (setq-default indent-tabs-mode nil) 

  (setq frame-title-format
        '(:eval
          (if buffer-file-name
              (replace-regexp-in-string
               "\\\\" "/"
               (replace-regexp-in-string
                (regexp-quote (getenv "HOME")) "~"
                (convert-standard-filename buffer-file-name)))
            (buffer-name))))

  (add-hook 'python-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil
                    tab-width 2)
              (setq python-indent 2)))

  (add-hook 'python-mode-hook
            (lambda()
              (local-set-key (kbd "C-c <right>") 'hs-show-block)
              (local-set-key (kbd "C-c <left>")  'hs-hide-block)
              (local-set-key (kbd "C-c <up>")    'hs-hide-all)
              (local-set-key (kbd "C-c <down>")  'hs-show-all)
              (hs-minor-mode t)))

  (eval-after-load "color-theme"
    '(progn
       (color-theme-initialize)
       (color-theme-charcoal-black)))

  (require 'color-theme)
EOF

#########################################################
cat<<'EOF' > $Dot/dotvimrc
set backupdir-=.
EOF

echo "set backupdir^=$Dot">> $Dot/dotvimrc

cat<<'EOF' >> $Dot/dotvimrc
"ascii mouse
set mouse=a
"place buffer name into window title
set title
"show line numbers
set number
"cycling through buffers
map <C-n> :exe  ":buf ".((bufnr("%") % bufnr("$"))+1)<CR>
" auto-change directory to that of the current buffer
autocmd BufEnter * cd %:p:h
" Shows the matching bracket when entering expressions
" (you'll never miss one again!)
set showmatch
set matchtime=15
"pretty colors
set background=light
set syntax=on
syntax enable
"" Incremental search
" (as you type in the search query, it will show you
" whether your query currently matches anything)
set ignorecase
set incsearch
set smartcase
" source code indenting
set smarttab
set smartindent


au BufRead,BufNewFile *.py setfiletype python

" by default, the indent is 2 spaces. 
set shiftwidth=2
set softtabstop=2
set tabstop=2

" for lua/python files, 2 spaces
autocmd Filetype python setlocal ts=2 sw=2 expandtab
autocmd Filetype lua setlocal ts=2 sw=2 expandtab


" Help for viminfo is at:  :he 'viminfo'
"   '10  : marks will be remembered for up to 10 previously edited files
"   "100 : will save up to 100 lines for each register
"   :20  : up to 20 lines of command-line history will be remembered
"   %    : saves and restores the buffer list
"   n... : where to save the viminfo files
"set viminfo='10,\"100,:20,%,n~/.viminfo
"autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <=
"line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
"set t_ti= t_te=

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdtree'
"Plugin 'altercation/vim-colors-solarized'"
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-markdown'
Plugin 'flazz/vim-colorschemes'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


let NERDTreeWinSize = 15 " window size, default=31.
autocmd VimEnter * NERDTree

autocmd BufNewFile,BufReadPost *.md set filetype=markdown
" - font type and size setting.
if has('win32')
    set guifont=Consolas:h12   " Win32.
elseif has('gui_macvim')
    set guifont=Monaco:h11     " OSX.
else
    set guifont=Monospace\ 12  " Linux.
endif
colorscheme slate
" vim -u vimrc
EOF

#########################################################

# call a shell with functions that call things with the above config 
Dot=$Dot                       \
DotDir=$PWD                     \
MYVIMRC=$Dot/dotvimrc             \
bash --init-file $Dot/dotbashrc  -i
